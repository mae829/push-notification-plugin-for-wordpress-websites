<?php

/**
* Ajax routine to Store Device id token generated from Google's FireBase 
* based on user subscription from browser to allow push notifications. 
* Device id is generated by Google's Firebase.
*
* @param string   $_POST['device_id'] Device id sent from firebase ajax routine
*
*
* @since 1.0.0
*/

	/** Sanitize the device id generated by Google's Firebase for the user who subscribed push notification  **/

	require __DIR__.'/../../vendor/autoload.php';

	$bpdeviceid = '';
	
    if (isset($_POST['device_id'])) {
		$bpdeviceid = sanitize_text_field($_POST['device_id']);
	}

	$bpsubscribeoptions = '10000000000';

	if (isset($_POST['subscriptionoptions'])) {
    	$bpsubscribeoptions = sanitize_text_field($_POST['subscriptionoptions']);
	}

	if (isset($_POST['onesignal_subscriptionoptions'])) {
    	$bpsubscribeoptions = sanitize_text_field($_POST['onesignal_subscriptionoptions']);
	}

	if ($bpsubscribeoptions === '') {
		$bpsubscribeoptions = '10000000000';
	}

	$bponesignalid = 0;

	if (isset($_POST['onesignal_get_subscriptionoptions_id'])) {
		
    	$bponesignalid = sanitize_text_field($_POST['onesignal_get_subscriptionoptions_id']);
		
		if ($bponesignalid === '1pnfpbadm') {
			
			$bponesignalid = 1;
			
		}
	}

	if ($bponesignalid === '') {
		$bponesignalid  = '0';
	}
	
	/** securing data from Firebase who subscribed push notification  **/
	
	$bpdeviceid = esc_html($bpdeviceid);
	
	$pushtype = 'normal';

	$pnfpbshortcodeactive = 'no';
	
	global $wpdb;
	
	$table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
		
	$dbname = $wpdb->dbname;

 	$is_firebase_version_col = $wpdb->get_results(  "SELECT `COLUMN_NAME` FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `table_name` = '{$table}' AND `COLUMN_NAME` = 'firebase_version'"  );

	if( empty($is_firebase_version_col) ):
    	$add_status_column = "ALTER TABLE `{$table}` ADD `firebase_version` VARCHAR(100) DEFAULT 'L'; ";
   		$wpdb->query( $add_firebase_version_column );
	endif;	
	
	if (isset($_POST['pushtype'])) {
	
	    $pushtype = sanitize_text_field($_POST['pushtype']);
	
	    $pushtype = esc_html($pushtype);
	    
	}

	$isadminpage = 'no';

	if (isset($_POST['pnfpbshortcodeactive']) ) {
		
		if (isset($_POST['isadminpage'])) {
			$isadminpage = $_POST['isadminpage'];
		}
		
		$pnfpbshortcodeactive = sanitize_text_field($_POST['pnfpbshortcodeactive']);
		
		if ($isadminpage === 'no') {
			update_option( 'pnfpb_shortcode_enable', $pnfpbshortcodeactive );
		}
	}

	$pnfpb_endpoint = null;
	$pnfpb_options = null;
	$pnfpb_ipaddress = null;

	if (isset($_POST['pnfpb_endpoint'])) {
		$pnfpb_endpoint = $_POST['pnfpb_endpoint'];
	}

	if (isset($_POST['pnfpb_options'])) {
		$pnfpb_options = $_POST['pnfpb_options'];
	}

	if(!empty($_SERVER['HTTP_CLIENT_IP'])) {  
        $pnfpb_ipaddress = $_SERVER['HTTP_CLIENT_IP'];  
    }  
    //whether ip is from the proxy  
    elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {  
         $pnfpb_ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];  
     }  
	//whether ip is from the remote address  
    else{  
         $pnfpb_ipaddress = $_SERVER['REMOTE_ADDR'];  
     }  

	$bpuserid = 0;
	
	if ( is_user_logged_in() ) {
		
    	$bpuserid = get_current_user_id();
	}


	if ($pushtype == 'icfirebasecred') {

		echo json_encode(array(
			'apiKey' => get_option( 'pnfpb_ic_fcm_api' ), 
			'authDomain' => get_option( 'pnfpb_ic_fcm_authdomain' ),
			'databaseURL' => get_option( 'pnfpb_ic_fcm_databaseurl' ), 
			'projectId' => get_option( 'pnfpb_ic_fcm_projectid' ), 
			'storageBucket' => get_option( 'pnfpb_ic_fcm_storagebucket' ), 
			'messagingSenderId' => get_option( 'pnfpb_ic_fcm_messagingsenderid' ), 
			'appId' => get_option( 'pnfpb_ic_fcm_appid' ),
			'publicKey' => get_option( 'pnfpb_ic_fcm_publickey' )
		));

	}

	if ($pushtype == 'onesignal_subscribed_users') {
		
		$table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
		
		if (isset($_POST['onesignal_externalid'])) {
			
			$onesignal_externalid =  sanitize_text_field($_POST['onesignal_externalid']);
			
			$results = $wpdb->get_results( "SELECT * FROM {$table} WHERE userid = {$onesignal_externalid} AND device_id LIKE '%onesignal%'" );
			
			if (count($results) <= 0) {
				
				$data = array('userid' => $onesignal_externalid, 'device_id' => 'onesignal@N', 'ip_address' => $pnfpb_ipaddress);
				
				$insertstatus = $wpdb->insert($table,$data);
						
				if (!$insertstatus) {
					echo "error in inserting onesignal subscription details in PNFPB for id: ".$onesignal_externalid;
				}
				else {
					echo '';
				}
					
			}
		}

	}

	if ($pushtype == 'onesignal_get_frontend_subscriptions') {

		$table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
			
		$data = '';
		
		if ( $bponesignalid !== 0 ) {
			
			$results = $wpdb->get_results( "SELECT * FROM {$table} WHERE userid = {$bponesignalid} AND device_id LIKE '%onesignal%'" );
			
			foreach( $results as $result ) {
				
				$data = array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $result->subscription_option);			
			}
			
			echo json_encode($data);
			
		} else {
			
			echo json_encode(array('subscriptionstatus' => 'notsubscribed', 'subscriptionoptions' => ''));
		}
	}

	if ($pushtype == 'onesignal_frontend_subscriptions') {

		$table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
			
		if ( $bpuserid !== 0 ) {
					
			$deviceid_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '{$bpsubscribeoptions}' WHERE userid = {$bpuserid}") ;
			
		}
			
		echo json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
	}
    
	if ($bpdeviceid != '' && $pushtype == 'normal') {
	
		$table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
		
 		$is_status_col = $wpdb->get_results( "SELECT `COLUMN_NAME` FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `table_name` = '{$table}' AND `COLUMN_NAME` = 'subscription_option'" );

		if( empty($is_status_col) ):
    		$add_status_column = "ALTER TABLE `{$table}` ADD `subscription_option` VARCHAR(50) NULL DEFAULT NULL AFTER `device_id`; ";
   			$wpdb->query( $add_status_column );
		endif;		
		
		$deviceid_exists = $wpdb->get_results("SELECT * FROM $table WHERE device_id LIKE '%".$bpdeviceid."%'"  ) ;
		
		foreach( $deviceid_exists as $result ) {
			
				if ($result->userid == 0 || $result->userid != $bpuserid){

					$deviceid_update_status = $wpdb->query("UPDATE {$table} SET userid = {$bpuserid} WHERE device_id = '{$bpdeviceid}'") ;	
				}
			
				if (is_null($result->web_auth)) {
					
					$deviceid_update_status = $wpdb->query("UPDATE {$table} SET web_auth = '{$pnfpb_endpoint}' WHERE device_id = '{$bpdeviceid}'") ;
					
				}
			
				if (is_null($result->web_256)) {
					
					$deviceid_update_status = $wpdb->query("UPDATE {$table} SET web_256 = '{$pnfpb_options}' WHERE device_id = '{$bpdeviceid}'") ;
					
				}
			
				if (is_null($result->ip_address)) {
					
					$deviceid_update_status = $wpdb->query("UPDATE {$table} SET ip_address = '{$pnfpb_ipaddress}' WHERE device_id = '{$bpdeviceid}'") ;
					
				}	
		}		
	
		if(count($deviceid_exists) > 0) {
			
			$results = $wpdb->get_results( "SELECT * FROM {$table} WHERE device_id = '{$bpdeviceid}' AND (device_id NOT LIKE '%!!%' OR device_id LIKE '%webview%')" );
			
			$version_value = 'L';
			
			foreach ( $results as $result ) {
				
				$version_value = $results->firebase_version;
		
			}
			
			if ($version_value !== 'httpv3' && get_option('pnfpb_httpv1_push') === '1') {
			
						$client = new Google_Client();
						// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
						$client->useApplicationDefaultCredentials(); 
							
						// Alternatively, provide the JSON authentication file directly.
						$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
						$client->setAuthConfig($configArray);
							
						// Add the scope as a string (multiple scopes can be provided as an array)
						$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
						$client->refreshTokenWithAssertion();
						$pnfpb_fbauth_token_array = $client->getAccessToken();
						$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
						$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
						$headers = array( 
							'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
							'Content-Type' => 'application/json',
							'access_token_auth'=> 'true'
						);
						if (get_option('pnfpb_ic_fcm_loggedin_notify') && get_option('pnfpb_ic_fcm_loggedin_notify') === '1') {
							$fields = array( 
	          					"to" => "/topics/pnfpbgeneralloggedin",
			  					"registration_tokens"=> array($bpdeviceid)
							);							
						} else {
							$fields = array( 
	          					"to" => "/topics/pnfpbgeneral",
			  					"registration_tokens"=> array($bpdeviceid)
							);			
						}
				
						$body = json_encode($fields);
			
						$args = array(
			    			'httpversion' => '1.0',
							'blocking' => true,
							'sslverify' => false,
							'body' => $body,
							'headers' => $headers
						);
			
						$apiresults = wp_remote_post($url, $args);
						$apibody = wp_remote_retrieve_body($apiresults);
						$bodyresults = json_decode($apibody,true);
						$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'") ;
			}
			
			$results = $wpdb->get_results( "SELECT * FROM {$table} WHERE firebase_version != 'httpv2' AND device_id = '{$bpdeviceid}' AND (device_id LIKE '%!!%' OR device_id NOT LIKE '%webview%')" );

			$version_value = 'L';
			
			foreach ( $results as $result ) {
				
				$version_value = $results->firebase_version;
				
				$device_id = $results->device_id;
				
				$device_id_array = explode("!!",$device_id);
				
				if (count($device_id_array) > 1) {
					
					$group_id = $device_id_array[1];
					
					
					$topics = '/topics/pnfpbgroupid'.$bpgroupid;
					
					if ($version_value !== 'httpv3' && get_option('pnfpb_httpv1_push') === '1') {
			
						$client = new Google_Client();
						// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
						$client->useApplicationDefaultCredentials(); 
							
						// Alternatively, provide the JSON authentication file directly.
						$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
						$client->setAuthConfig($configArray);
							
						// Add the scope as a string (multiple scopes can be provided as an array)
						$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
						$client->refreshTokenWithAssertion();
						$pnfpb_fbauth_token_array = $client->getAccessToken();
						$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
						$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
						$headers = array( 
							'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
							'Content-Type' => 'application/json',
							'access_token_auth'=> 'true'
						);
			
						$fields = array( 
	          				"to" => $topics,
			  				"registration_tokens"=> array($bpdeviceid)
						);			
    
				
						$body = json_encode($fields);
			
						$args = array(
			    			'httpversion' => '1.0',
							'blocking' => true,
							'sslverify' => false,
							'body' => $body,
							'headers' => $headers
						);
			
						$apiresults = wp_remote_post($url, $args);
						$apibody = wp_remote_retrieve_body($apiresults);
						$bodyresults = json_decode($apibody,true);
						$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'") ;
					}								
					
				}
				
			}
			
			echo "duplicate";
		}
		else
		{
			$data = array('userid' => $bpuserid, 'device_id' => $bpdeviceid, 'subscription_option' => $bpsubscribeoptions, 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'ip_address' => $pnfpb_ipaddress);
			
			$insertstatus = $wpdb->insert($table,$data);
			if (!$insertstatus || $insertstatus != 0){
				$my_id = $wpdb->insert_id;
				echo json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
			}
			else
			{
				echo json_encode(array('subscriptionstatus' => 'fail', 'subscriptionoptions' => $bpsubscribeoptions));
			}
			
			if (get_option('pnfpb_httpv1_push') === '1') {
			
				$client = new Google_Client();
				// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
				$client->useApplicationDefaultCredentials(); 
							
				// Alternatively, provide the JSON authentication file directly.
				$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
				$client->setAuthConfig($configArray);
							
				// Add the scope as a string (multiple scopes can be provided as an array)
				$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
				$client->refreshTokenWithAssertion();
				$pnfpb_fbauth_token_array = $client->getAccessToken();
				$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
				$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
				$headers = array( 
					'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
					'Content-Type' => 'application/json',
					'access_token_auth'=> 'true'
				);
				
				if (get_option('pnfpb_ic_fcm_loggedin_notify') && get_option('pnfpb_ic_fcm_loggedin_notify') === '1') {
					$fields = array( 
	          			"to" => "/topics/pnfpbgeneralloggedin",
			  			"registration_tokens"=> array($bpdeviceid)
							);							
				} else {				
			
					$fields = array( 
	          			"to" => "/topics/pnfpbgeneral",
			  			"registration_tokens"=> array($bpdeviceid)
					);	
				}
    
				
				$body = json_encode($fields);
			
				$args = array(
			    	'httpversion' => '1.0',
					'blocking' => true,
					'sslverify' => false,
					'body' => $body,
					'headers' => $headers
				);
			
				$apiresults = wp_remote_post($url, $args);
				$apibody = wp_remote_retrieve_body($apiresults);
				$bodyresults = json_decode($apibody,true);
				$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'");
			}
		}
		

	}
	else
	{
		if ($pushtype == 'subscribe-button') {
		    
		    $table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
			
			
 			$is_status_col = $wpdb->get_results( "SELECT `COLUMN_NAME` FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `table_name` = '{$table}' AND `COLUMN_NAME` = 'subscription_option'" );

			if( empty($is_status_col) ):
    			$add_status_column = "ALTER TABLE `{$table}` ADD `subscription_option` VARCHAR(50) NULL DEFAULT NULL AFTER `device_id`; ";
   				$wpdb->query( $add_status_column );
			endif;			
			
			if ($bpdeviceid !== '') {
				
				if ( $bpuserid !== 0 ) {
					
					$deviceid_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '{$bpsubscribeoptions}' WHERE userid = {$bpuserid}") ;
			
					$deviceid_group_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '{$bpsubscribeoptions}' WHERE userid = {$bpuserid}") ;
					
				}
				else 
				{
					$deviceid_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '{$bpsubscribeoptions}' WHERE device_id LIKE '%{$bpdeviceid}%' AND device_id NOT LIKE '%!!%'") ;
			
					$deviceid_group_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '{$bpsubscribeoptions}' WHERE device_id LIKE '%{$bpdeviceid}%' AND device_id LIKE '%!!%'") ;				
				}
				
				
			
				$deviceid_select_status = $wpdb->get_results("SELECT * FROM {$table} WHERE device_id LIKE '%".$bpdeviceid."%'");			
		
				if($deviceid_update_status > 0) {
					
					$version_values = $wpdb->get_col( "SELECT firebase_version FROM {$table} WHERE device_id LIKE '%{$bpdeviceid}%'" );
					$version_value = 'L';
					foreach ( $version_values as $value ) {
						$version_value = $value;
					}
			
					if ($version_value !== 'httpv3' && get_option('pnfpb_httpv1_push') === '1') {				
					
						$client = new Google_Client();
						// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
						$client->useApplicationDefaultCredentials(); 
							
						// Alternatively, provide the JSON authentication file directly.
						$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
						$client->setAuthConfig($configArray);
							
						// Add the scope as a string (multiple scopes can be provided as an array)
						$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
						$client->refreshTokenWithAssertion();
						$pnfpb_fbauth_token_array = $client->getAccessToken();
						$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
						$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
						$headers = array( 
							'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
							'Content-Type' => 'application/json',
							'access_token_auth'=> 'true'
						);
						
						if (get_option('pnfpb_ic_fcm_loggedin_notify') && get_option('pnfpb_ic_fcm_loggedin_notify') === '1') {
							
							$fields = array( 
	          					"to" => "/topics/pnfpbgeneralloggedin",
			  					"registration_tokens"=> array($bpdeviceid)
							);
							
						} else {						
			
							$fields = array( 
	          					"to" => "/topics/pnfpbgeneral",
			  					"registration_tokens"=> array($bpdeviceid)
							);			
						}
				
						$body = json_encode($fields);
			
						$args = array(
			    			'httpversion' => '1.0',
							'blocking' => true,
							'sslverify' => false,
							'body' => $body,
							'headers' => $headers
						);
			
						$apiresults = wp_remote_post($url, $args);
						$apibody = wp_remote_retrieve_body($apiresults);
						$bodyresults = json_decode($apibody,true);
						$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'") ;

					}
					

					echo json_encode(array('subscriptionstatus' => 'subscribed updated', 'subscriptionoptions' => $bpsubscribeoptions));
			
				}
				else
				{
					if(count($deviceid_select_status) <= 0) {
						$bpdeviceid = $bpdeviceid;
						$data = array('userid' => $bpuserid, 'device_id' => $bpdeviceid, 'subscription_option' => $bpsubscribeoptions, 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'ip_address' => $pnfpb_ipaddress);
						$insertstatus = $wpdb->insert($table,$data);
						if (!$insertstatus || $insertstatus != 0){
							$my_id = $wpdb->insert_id;
					
							echo json_encode(array('subscriptionstatus' => 'subscribed newly', 'subscriptionoptions' => $bpsubscribeoptions));
						}
						else
						{
							echo json_encode(array('subscriptionstatus' => 'fail', 'subscriptionoptions' => $bpsubscribeoptions));
						}
						
						if (get_option('pnfpb_httpv1_push') === '1') {						
						
							$client = new Google_Client();
							// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
							$client->useApplicationDefaultCredentials(); 
							
							// Alternatively, provide the JSON authentication file directly.
							$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
							$client->setAuthConfig($configArray);
							
							// Add the scope as a string (multiple scopes can be provided as an array)
							$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
							$client->refreshTokenWithAssertion();
							$pnfpb_fbauth_token_array = $client->getAccessToken();
							$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
							$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
							$headers = array( 
								'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
								'Content-Type' => 'application/json',
								'access_token_auth'=> 'true'
							);
							
							if (get_option('pnfpb_ic_fcm_loggedin_notify') && get_option('pnfpb_ic_fcm_loggedin_notify') === '1') {
								
								$fields = array( 
	          						"to" => "/topics/pnfpbgeneralloggedin",
			  						"registration_tokens"=> array($bpdeviceid)
								);
								
							} else {
			
								$fields = array( 
									"to" => "/topics/pnfpbgeneral",
									"registration_tokens"=> array($bpdeviceid)
								);
							}
    
				
							$body = json_encode($fields);
			
							$args = array(
								'httpversion' => '1.0',
								'blocking' => true,
								'sslverify' => false,
								'body' => $body,
								'headers' => $headers
							);
			
							$apiresults = wp_remote_post($url, $args);
							$apibody = wp_remote_retrieve_body($apiresults);
							$bodyresults = json_decode($apibody,true);
							$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'") ;
						}
						
					}
					else 
					{
						echo json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
				
					}
				}
			}
			else
			{
				if ( $bpuserid !== 0 ) {
					$deviceid_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '{$bpsubscribeoptions}' WHERE userid = {$bpuserid}") ;
			
					$deviceid_group_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '{$bpsubscribeoptions}' WHERE userid = {$bpuserid}") ;
				}
				else 
				{
					$deviceid_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '{$bpsubscribeoptions}' WHERE device_id LIKE '%{$bpdeviceid}%' AND device_id NOT LIKE '%!!%'") ;
			
					$deviceid_group_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '{$bpsubscribeoptions}' WHERE device_id LIKE '%{$bpdeviceid}%' AND device_id LIKE '%!!%'") ;				
				}
			
				$deviceid_select_status = $wpdb->get_results("SELECT * FROM {$table} WHERE device_id LIKE '%".$bpdeviceid."%'");			
		
				if($deviceid_update_status > 0) {
					
					$version_values = $wpdb->get_col( "SELECT firebase_version FROM {$table} WHERE device_id LIKE '%".$bpdeviceid."%'" );
					$version_value = 'L';
					foreach ( $version_values as $value ) {
						$version_value = $value;
					}
			
					if ($version_value !== 'httpv3' && get_option('pnfpb_httpv1_push') === '1') {				
					
						$client = new Google_Client();
						// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
						$client->useApplicationDefaultCredentials(); 
							
						// Alternatively, provide the JSON authentication file directly.
						$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
						$client->setAuthConfig($configArray);
							
						// Add the scope as a string (multiple scopes can be provided as an array)
						$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
						$client->refreshTokenWithAssertion();
						$pnfpb_fbauth_token_array = $client->getAccessToken();
						$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
						$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
						$headers = array( 
							'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
							'Content-Type' => 'application/json',
							'access_token_auth'=> 'true'
						);
			
						
						if (get_option('pnfpb_ic_fcm_loggedin_notify') && get_option('pnfpb_ic_fcm_loggedin_notify') === '1') {
							$fields = array( 
	          					"to" => "/topics/pnfpbgeneralloggedin",
			  					"registration_tokens"=> array($bpdeviceid)
							);							
						} else {
							$fields = array( 
	          					"to" => "/topics/pnfpbgeneral",
			  					"registration_tokens"=> array($bpdeviceid)
							);			
						}
				
						$body = json_encode($fields);
			
						$args = array(
			    			'httpversion' => '1.0',
							'blocking' => true,
							'sslverify' => false,
							'body' => $body,
							'headers' => $headers
						);
			
						$apiresults = wp_remote_post($url, $args);
						$apibody = wp_remote_retrieve_body($apiresults);
						$bodyresults = json_decode($apibody,true);
						$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'") ;

					}
					

					echo json_encode(array('subscriptionstatus' => 'subscribed webview', 'subscriptionoptions' => $bpsubscribeoptions));
			
				}
			}
		}
		else
		{
		    
		    if ($pushtype == 'checkdeviceid') {

		        $table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
				
				$is_status_col = $wpdb->get_results( "SELECT `COLUMN_NAME` FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `table_name` = '{$table}' AND `COLUMN_NAME` = 'subscription_option'" );

				if( empty($is_status_col) ):
					$add_status_column = "ALTER TABLE `{$table}` ADD `subscription_option` VARCHAR(50) NULL DEFAULT NULL AFTER `device_id`; ";
					$wpdb->query( $add_status_column );
				endif;

				if ($bpdeviceid !== '') {
		
					$deviceid_select_status = $wpdb->get_results("SELECT * FROM {$table} WHERE device_id LIKE '%".$bpdeviceid."%'");
				
					$subscribed = true;
				
					//$subscriptionoptions = '000000000000';

					foreach( $deviceid_select_status as $result ) {
					
						if ($result->userid == 0 || $result->userid != $bpuserid) {

							$deviceid_update_status = $wpdb->query("UPDATE {$table} SET userid = {$bpuserid} WHERE device_id = '{$bpdeviceid}'") ;	
						}
						
						if (is_null($result->web_auth)) {
					
							$deviceid_update_status = $wpdb->query("UPDATE {$table} SET web_auth = '{$pnfpb_endpoint}' WHERE device_id = '{$bpdeviceid}'") ;
					
						}
			
						if (is_null($result->web_256)) {
					
							$deviceid_update_status = $wpdb->query("UPDATE {$table} SET web_256 = '{$pnfpb_options}' WHERE device_id = '{$bpdeviceid}'") ;
					
						}
			
						if (is_null($result->ip_address)) {
					
							$deviceid_update_status = $wpdb->query("UPDATE {$table} SET ip_address = '{$pnfpb_ipaddress}' WHERE device_id = '{$bpdeviceid}'") ;
					
						}					
					
						$subscriptionoptions = $result->subscription_option;
					
						if ($subscriptionoptions === '' || $subscriptionoptions === NULL || $subscriptionoptions === null || $subscriptionoptions === 'NULL') {
						
							$subscriptionoptions = '100000000000';
						
							$deviceid_update_status = $wpdb->query("UPDATE {$table} SET subscription_option = '100000000000' WHERE device_id = '{$bpdeviceid}'") ;
							
						}
					
						if (strpos($result->device_id,'@N') !== false || $subscriptionoptions === '000000000000' || $subscriptionoptions === '000000000010' ) 
						{
							$subscribed = false;
						}					
				
					}
				}
				else 
				{
					$subscriptionoptions = '000000000000';
					if (($bpdeviceid  === '' || $bpsubscribeoptions === '000000000000' || $bpsubscribeoptions === '') && $bpuserid != 0) {
					
						$deviceid_select_status = $wpdb->get_results("SELECT * FROM {$table} WHERE userid = {$bpuserid}");
					
						foreach( $deviceid_select_status as $result ) {
						
							$subscriptionoptions = $result->subscription_option;
						}
					}
				}

		        if(count($deviceid_select_status) > 0) {
					
	    			if ($subscribed) {
						
						$version_values = $wpdb->get_col( "SELECT firebase_version FROM {$table} WHERE device_id = '{$bpdeviceid}'  AND (device_id NOT LIKE '%!!%' OR device_id LIKE '%webview%')" );
						$version_value = 'L';
						
						foreach ( $version_values as $value ) {
							
							$version_value = $value;
							
						}
			
						if ($version_value !== 'httpv3' && get_option('pnfpb_httpv1_push') === '1') {						
						
							$client = new Google_Client();
							// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
							$client->useApplicationDefaultCredentials(); 
							
							// Alternatively, provide the JSON authentication file directly.
							$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
							$client->setAuthConfig($configArray);
							
							// Add the scope as a string (multiple scopes can be provided as an array)
							$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
							$client->refreshTokenWithAssertion();
							$pnfpb_fbauth_token_array = $client->getAccessToken();
							$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
							$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
							$headers = array( 
								'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
								'Content-Type' => 'application/json',
								'access_token_auth'=> 'true'
							);
							
							if (get_option('pnfpb_ic_fcm_loggedin_notify') && get_option('pnfpb_ic_fcm_loggedin_notify') === '1') {
								$fields = array( 
	          						"to" => "/topics/pnfpbgeneralloggedin",
			  						"registration_tokens"=> array($bpdeviceid)
								);							
							} else {
								$fields = array( 
									"to" => "/topics/pnfpbgeneral",
									"registration_tokens"=> array($bpdeviceid)
								);			
							}
				
							$body = json_encode($fields);
			
							$args = array(
								'httpversion' => '1.0',
								'blocking' => true,
								'sslverify' => false,
								'body' => $body,
								'headers' => $headers
							);
			
							$apiresults = wp_remote_post($url, $args);
							$apibody = wp_remote_retrieve_body($apiresults);
							$bodyresults = json_decode($apibody,true);
							$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'") ;

						}
						
						$results = $wpdb->get_results( "SELECT * FROM {$table} WHERE firebase_version != 'httpv3' AND device_id = '{$bpdeviceid}' AND (device_id LIKE '%!!%' AND device_id NOT LIKE '%webview%')" );

						$version_value = 'L';
			
						foreach ( $results as $result ) {
				
							$version_value = $results->firebase_version;
				
							$device_id = $results->device_id;
				
							$device_id_array = explode("!!",$device_id);
				
							if (count($device_id_array) > 1) {
					
								$group_id = $device_id_array[1];
					
				
								$topics = '/topics/pnfpbgroupid'.$bpgroupid;
					
								if ($version_value !== 'httpv3' && get_option('pnfpb_httpv1_push') === '1') {
			
									$client = new Google_Client();
									// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
									$client->useApplicationDefaultCredentials(); 
							
									// Alternatively, provide the JSON authentication file directly.
									$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
									$client->setAuthConfig($configArray);
							
									// Add the scope as a string (multiple scopes can be provided as an array)
									$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
									$client->refreshTokenWithAssertion();
									$pnfpb_fbauth_token_array = $client->getAccessToken();
									$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
									$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
									$headers = array( 
										'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
										'Content-Type' => 'application/json',
										'access_token_auth'=> 'true'
									);
			
									$fields = array( 
	          							"to" => $topics,
			  							"registration_tokens"=> array($bpdeviceid)
									);			
    
				
									$body = json_encode($fields);
			
									$args = array(
			    						'httpversion' => '1.0',
										'blocking' => true,
										'sslverify' => false,
										'body' => $body,
										'headers' => $headers
									);
			
									$apiresults = wp_remote_post($url, $args);
									$apibody = wp_remote_retrieve_body($apiresults);
									$bodyresults = json_decode($apibody,true);
									$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'") ;
							}								
					
						}
				
					}						
						
						
						echo json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $subscriptionoptions));
					}
					else 
					{
						echo json_encode(array('subscriptionstatus' => 'not-subscribed', 'subscriptionoptions' => $subscriptionoptions));
					}
			
		        }
		        else
		        {
					if ($bpdeviceid !== '') {
						
						$data = array('userid' => $bpuserid, 'device_id' => $bpdeviceid, 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'ip_address' => $pnfpb_ipaddress);
						$insertstatus = $wpdb->insert($table,$data);
						
						if (!$insertstatus || $insertstatus != 0){
							
							$my_id = $wpdb->insert_id;
							
							echo json_encode(array('subscriptionstatus' => 'subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
							
						}
						else
						{
							echo json_encode(array('subscriptionstatus' => 'not-subscribed', 'subscriptionoptions' => $bpsubscribeoptions));
						}
						
						
						if (get_option('pnfpb_httpv1_push') === '1') {
						
							$client = new Google_Client();
							// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
							$client->useApplicationDefaultCredentials(); 
							
							// Alternatively, provide the JSON authentication file directly.
							$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
							$client->setAuthConfig($configArray);
							
							// Add the scope as a string (multiple scopes can be provided as an array)
							$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
							$client->refreshTokenWithAssertion();
							$pnfpb_fbauth_token_array = $client->getAccessToken();
							$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
							$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
							$headers = array( 
								'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
								'Content-Type' => 'application/json',
								'access_token_auth'=> 'true'
							);
							
							if (get_option('pnfpb_ic_fcm_loggedin_notify') && get_option('pnfpb_ic_fcm_loggedin_notify') === '1') {
								$fields = array( 
	          						"to" => "/topics/pnfpbgeneralloggedin",
			  						"registration_tokens"=> array($bpdeviceid)
								);							
							} else {
			
								$fields = array( 
	          						"to" => "/topics/pnfpbgeneral",
			  						"registration_tokens"=> array($bpdeviceid)
								);			
							}
				
							$body = json_encode($fields);
			
							$args = array(
			    				'httpversion' => '1.0',
								'blocking' => true,
								'sslverify' => false,
								'body' => $body,
								'headers' => $headers
							);
			
							$apiresults = wp_remote_post($url, $args);
							$apibody = wp_remote_retrieve_body($apiresults);
							$bodyresults = json_decode($apibody,true);
							$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'") ;
							
						}
						
					}
				}
		        
		    }
		    else
		    {
		    	if ($bpdeviceid != '' && $pushtype == 'checkdeviceidforgroup') {
					
					$bpgroupid = sanitize_text_field($_POST['bpgroup_id']);

		        	$table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
		
		        	$deviceid_select_status = $wpdb->query("SELECT * FROM {$table} WHERE device_id = '{$bpdeviceid}!!{$bpgroupid}' AND userid = {$bpuserid}") ;
					
					$subscribed = true;
					$subscriptionoptions = '000000000000';					
					
		        	if($deviceid_select_status > 0) {
						
						$version_values = $wpdb->get_col( "SELECT firebase_version FROM {$table} WHERE device_id = '{$bpdeviceid}!!{$bpgroupid}'" );
						$version_value = 'L';
						foreach ( $version_values as $value ) {
							$version_value = $value;
						}
			
						if ($version_value !== 'httpv3' && get_option('pnfpb_httpv1_push') === '1') {						
						
							$group_name = groups_get_slug($bpgroupid);
							$client = new Google_Client();
							// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
							$client->useApplicationDefaultCredentials(); 
							
							// Alternatively, provide the JSON authentication file directly.
							$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
							$client->setAuthConfig($configArray);
							
							// Add the scope as a string (multiple scopes can be provided as an array)
							$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
							$client->refreshTokenWithAssertion();
							$pnfpb_fbauth_token_array = $client->getAccessToken();
							$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
							$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
							$headers = array( 
								'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
								'Content-Type' => 'application/json',
								'access_token_auth'=> 'true'
							);
							$grouptopic = "/topics/".$group_name;
							$fields = array( 
								"to" => $grouptopic,
								"registration_tokens"=> array($bpdeviceid)
							);			
    
				
							$body = json_encode($fields);
			
							$args = array(
								'httpversion' => '1.0',
								'blocking' => true,
								'sslverify' => false,
								'body' => $body,
								'headers' => $headers
							);
			
							$apiresults = wp_remote_post($url, $args);
							$apibody = wp_remote_retrieve_body($apiresults);
							$bodyresults = json_decode($apibody,true);
							$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpdeviceid}'");
							
						}
							
			        	echo "subscribed";
			
		        	}
		        	else
		        	{
			        	echo "not-subscribed";
		        	}		        
		        
		    	}
				else
				{
		    		if ($bpdeviceid != '' && $pushtype == 'subscribe-group-button') {
						
						$bpgroupid = sanitize_text_field($_POST['bpgroup_id']);

		    			$table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
						
 						$is_status_col = $wpdb->get_results(  "SELECT `COLUMN_NAME` FROM `INFORMATION_SCHEMA`.`COLUMNS`    WHERE `table_name` = '{$table}' AND `COLUMN_NAME` = 'subscription_option'"  );

						if( empty($is_status_col) ):
    						$add_status_column = "ALTER TABLE `{$table}` ADD `subscription_option` VARCHAR(50) NULL DEFAULT NULL AFTER `device_id`; ";
							$wpdb->query( $add_status_column );
						endif;			
						
						$cookievalue = '';
						if(isset($_COOKIE['pnfpb_group_push_notification_'.$bpgroupid])) {
							$cookievalue = $_COOKIE['pnfpb_group_push_notification_'.$bpgroupid];
						}
						
						$bpnewdeviceid = $bpdeviceid.'!!'.$bpgroupid.'!!'.$cookievalue;
						
						$deviceid_select_status = $wpdb->get_results("SELECT * FROM {$table} WHERE device_id LIKE '%".$bpdeviceid."%'");
				
						$subscribed = true;
						$subscriptionoptions = '000000000000';

						foreach( $deviceid_select_status as $result ) {
							$subscriptionoptions = $result->subscription_option;
						}
		
		
						$uniqueid = uniqid();
						setcookie('pnfpb_group_push_notification_'.$bpgroupid, $uniqueid, time() + (86400 * 30), "/"); // 86400 = 1 day
						$bpnewdeviceid = $bpdeviceid.'!!'.$bpgroupid.'!!'.$uniqueid;
    					$data = array('userid' => $bpuserid, 'device_id' => $bpnewdeviceid,'subscription_option' => $subscriptionoptions, 'web_auth' => $pnfpb_endpoint, 'web_256' => $pnfpb_options, 'ip_address' => $pnfpb_ipaddress);
    					$insertstatus = $wpdb->insert($table,$data);
   						if (!$insertstatus || $insertstatus != 0){
	    					$my_id = $wpdb->insert_id;
	    					echo 'subscribed';
    					}
    					else
    					{
	    					echo json_encode(array('subscriptionstatus' => 'deleted'));
    					}
						
						if (get_option('pnfpb_httpv1_push') === '1') {
						
						$group_name = 'pnfpbgroupid'.$bpgroupid;
						$client = new Google_Client();
						// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
						$client->useApplicationDefaultCredentials(); 
							
						// Alternatively, provide the JSON authentication file directly.
						$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
						$client->setAuthConfig($configArray);
							
						// Add the scope as a string (multiple scopes can be provided as an array)
						$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
						$client->refreshTokenWithAssertion();
						$pnfpb_fbauth_token_array = $client->getAccessToken();
						$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
						$url = 'https://iid.googleapis.com/iid/v1:batchAdd';
			
						$headers = array( 
							'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
							'Content-Type' => 'application/json',
							'access_token_auth'=> 'true'
						);
						$grouptopic = "/topics/".$group_name;
						$fields = array( 
	          				"to" => $grouptopic,
			  				"registration_tokens"=> array($bpdeviceid)
						);			
    
				
						$body = json_encode($fields);
			
						$args = array(
			    			'httpversion' => '1.0',
							'blocking' => true,
							'sslverify' => false,
							'body' => $body,
							'headers' => $headers
						);

						$apiresults = wp_remote_post($url, $args);

						$apibody = wp_remote_retrieve_body($apiresults);
						$bodyresults = json_decode($apibody,true);
						$deviceid_version_update_status = $wpdb->query("UPDATE {$table} SET firebase_version = 'httpv3' WHERE device_id = '{$bpnewdeviceid}'");
						}
						
		        
		    		}
					else
					{
		    			if ($bpdeviceid != '' && $pushtype == 'unsubscribe-group-button') {
						
							$bpgroupid = sanitize_text_field($_POST['bpgroup_id']);

		    				$table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';

							$cookievalue = '';
							if(isset($_COOKIE['pnfpb_group_push_notification_'.$bpgroupid])) {
								$cookievalue = $_COOKIE['pnfpb_group_push_notification_'.$bpgroupid];
							}							
		
							$bpolddeviceid = $bpdeviceid.'!!'.$bpgroupid.'!!'.$cookievalue;
		
		    				$deviceid_update_status = $wpdb->query("DELETE from {$table} WHERE userid = {$bpuserid} AND device_id = '{$bpolddeviceid}'") ;
							
							$group_name = groups_get_slug($bpgroupid);
							
							if (get_option('pnfpb_httpv1_push') === '1') {
							
							$client = new Google_Client();
							// Authentication with the GOOGLE_APPLICATION_CREDENTIALS environment variable
							$client->useApplicationDefaultCredentials(); 
							
							// Alternatively, provide the JSON authentication file directly.
							$configArray = json_decode(get_option('pnfpb_sa_json_data'),true);
							$client->setAuthConfig($configArray);
							
							// Add the scope as a string (multiple scopes can be provided as an array)
							$client->addScope('https://www.googleapis.com/auth/firebase.messaging');
							$client->refreshTokenWithAssertion();
							$pnfpb_fbauth_token_array = $client->getAccessToken();
							$pnfpb_fbauth_token = $pnfpb_fbauth_token_array['access_token'];
			
							$url = 'https://iid.googleapis.com/iid/v1:batchRemove';
			
							$headers = array( 
								'Authorization' => 'Bearer '.$pnfpb_fbauth_token, 
								'Content-Type' => 'application/json',
								'access_token_auth'=> 'true'
							);
						
							$grouptopic = "/topics/".$group_name;
			
							$fields = array( 
	          					"to" => $grouptopic,
			  					"registration_tokens"=> array($bpdeviceid)
							);			
    
				
							$body = json_encode($fields);
			
							$args = array(
			    				'httpversion' => '1.0',
								'blocking' => true,
								'sslverify' => false,
								'body' => $body,
								'headers' => $headers
							);
			
							$apiresults = wp_remote_post($url, $args);
							$apibody = wp_remote_retrieve_body($apiresults);
							$bodyresults = json_decode($apibody,true);
								
							}
							
		
		    				if($deviceid_update_status > 0) {
		    
			    				echo json_encode(array('subscriptionstatus' => 'deleted'));
			
		    				}
		    				else
		   					{
				    			echo json_encode(array('subscriptionstatus' => 'failed in unsubscribe button'));
		    				}		        
		        
		    			}
						else
						{
							if ($bpdeviceid != '' && $pushtype == 'deletepushtoken') {
								
								$table = $wpdb->prefix.'pnfpb_ic_subscribed_deviceids_web';
								
								$deviceid_update_status = $wpdb->query("DELETE from {$table} WHERE device_id = '{$bpdeviceid}'");
								
								if($deviceid_update_status > 0) {
									
									echo json_encode(array('subscriptionstatus' => 'deleted','deviceidupdatestauts' => $deviceid_update_status,'deviceid' => $bpdeviceid));
									
								}
								else {
									
									echo json_encode(array('subscriptionstatus' => 'failed in deleting push token','deviceidupdatestauts' => $deviceid_update_status,'deviceid' => $bpdeviceid));
									
								}
							}
							else {
								
								if ($pushtype !== 'icfirebasecred' && $pushtype !== 'onesignal_subscribed_users' && $pushtype !== 'onesignal_frontend_subscriptions' && $pushtype !== 'onesignal_get_frontend_subscriptions') {
                					echo json_encode(array('subscriptionstatus' => 'failed'));
								}
								
							}
						}		    
					}
				}
		    }
		}
		
	}

	wp_die();
	
?>